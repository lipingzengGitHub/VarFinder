#!/usr/bin/env perl
use strict;
use warnings;
print "\n\nThis script is annotating the VCF file to gene and amino acid\n\n"; 
print "Make sure to provide the same version of the gff3 file as the annotated genome and cds file\n\n";
print "Please check wether the chromosome name in vcf file is consistent with the one in the gff3 file\n\n";
if(@ARGV !=4) {print "Usage: perl\tVarAnnotate.pl\tVCF_file\tGFF3_file\tcds_fasta\toutput\n\n"};
(my $vcf, my $GFF3, my $cds, my $output)= @ARGV;

# Step1. Find the gene position for each codon on its corresponding gene
#Notice: The start position of the first exon is different from the first CDS, because the first exon might include the UTR region.
print "\nNotice: The user might need to change the recognize string in row 40 & 41 to fit the GFF3 file for the specific analyzed species\n\n";

my ($position_output1);
# Open output file for transform genome position of CDS to the gene position
open my $position_output1_fh, '>',"Gene_Position.FromGFF3.txt" or die "Couldn't open input file: $!";
# Print header line for output file
print $position_output1_fh "Chromosome\tGene_ID\tExon_number\tCDS_start_genome\tCDS_end_genome\tCDS_start_gene\tCDS_end_gene\tExon_Length\tStrand\n";

# Open GFF3 file
open my $gff_fh, '<',"$GFF3" or die "Couldn't open input file: $!";
# Initialize variables
my ($current_gene1, $current_chrom1, $current_strand1, $current_cds_onGene_start1, $current_cds_onGene_end1, $current_exon_num1,$current_exon_length1);
my $exon_count1 = 0;
$current_gene1="";
# Process input file line by line
while (<$gff_fh>) {
    chomp;
    next if $_ =~ /^#/; # Skip comment lines
    # Split line into fields
    my @fields1 = split("\t", $_);
    my ($chrom1, $source1, $feature1, $start1, $end1, $score1, $strand1, $frame1, $attribute1) = @fields1;

    # Skip non-CDS features
    next unless $feature1 eq 'CDS';

    # Parse gene ID from attribute field
###########################################################################################################################################
#Notice: The user might need to modifiy the recoganize pattern in the following two codes based on the GFF3 file of the specific species. # 
    my @arr11=split/;/, $attribute1;
    my ($gene_id1)= $arr11[-1] =~/protein_id=(\S+)/;
###########################################################################################################################################

    # If new gene, reset variables
    if ($gene_id1 ne $current_gene1) {
        $current_gene1 = $gene_id1;
        $current_chrom1 = $chrom1;
        $current_strand1 = $strand1;
        $current_cds_onGene_start1 = 1;
        $current_cds_onGene_end1 = 0;
        $current_exon_num1 = 0;
        $exon_count1 = 0;
    }

    # Increment exon count and calculate CDS start and end positions
    $exon_count1++;
    my ($CDS_start_genome1, $CDS_end_genome1) = ($start1, $end1);
    my ($cds_start_onGene1, $cds_end_onGene1);
    $cds_start_onGene1 = $current_cds_onGene_end1 + 1;
    $cds_end_onGene1 = $cds_start_onGene1 + $CDS_end_genome1 - $CDS_start_genome1;
    $current_cds_onGene_end1 = $cds_end_onGene1;
    $current_exon_length1 = $CDS_end_genome1 - $CDS_start_genome1 + 1;	
    $current_exon_num1++;

    # Print output
    print $position_output1_fh "$current_chrom1\t$current_gene1\t$current_exon_num1\t$CDS_start_genome1\t$CDS_end_genome1\t$cds_start_onGene1\t$cds_end_onGene1\t$current_exon_length1\t$current_strand1\n";
}close $gff_fh;
close $position_output1_fh;

# Step 2
# Read in the gene position file for each CDS and store the information in a hash
my %cds_positions;
open my $gene_pos_fh,'<', "Gene_Position.FromGFF3.txt" or die "Can't open gene positions file: $!";
while (<$gene_pos_fh>) {
  chomp;
  my ($chromosome, $gene_id, $exon_num, $CDS_start_genome, $CDS_end_genome, $CDS_start_gene, $CDS_end_gene,$exon_length,$strand) = split(/\t/, $_);

  # Skip the header line
  next if $_ =~ /Exon_Length/;

  # Store the information in a hash of hashes
  $cds_positions{$chromosome}{$gene_id}{$exon_num} = {
    genome_start => $CDS_start_genome,
    genome_end => $CDS_end_genome,
    CDS_start_gene => $CDS_start_gene,
    CDS_end_gene => $CDS_end_gene,
    Strand => $strand,
  };
}close $gene_pos_fh;

#Step 3
# Open the cds file and store the sequence in a hash
open my $cds_fh,'<', "$cds" or die "Can't open cds fasata file: $!";
my %cds_seq;
my $gene_ID;
while (<$cds_fh>) {
  chomp;
  if (/^>(\S+)/) {
    $gene_ID = $1;
    $cds_seq{$gene_ID} = "";
  } else {
    $cds_seq{$gene_ID} .= $_;
  }
}close $cds_fh;

#Step 4
# Open the output file
open my $output_fh, '>',"$output" or die "Can't open the output file: $!";
#Print the header line  to the output file
print $output_fh "Chrom\tGenome_pos\tGene_ID\tStrand\tExon_num\tCDS_pos\tCodon_pos\tSeq_depth\tMutRatio\tFeature\tRef_nt\tAlt_nt\tRef_codon\tAlt_codon\tRef_aa\tAlt_aa\n";

#Step 5
# Read in the $vcf_fh file and process each variant
open my $vcf_fh,'<', "$vcf" or die "Can't open VCF file: $!";

# Initiate variables
my ($CDS_start_gene1, $CDS_end_gene1, $genome_start1, $genome_end1);

# Processing
while (<$vcf_fh>) {
  chomp;
  # Skip comment lines
  next if $_ =~ /^#/;
  my ($chromosome, $position, $id, $ref_nt, $alt_nt, $qual, $filter, $info, $format, $other) = split(/\t/, $_);
 
  my $depth=0;
  my $MutRatio=0;
  my $ref_aa="";
  my $alt_aa="";
  my $ref_codon="";
  my $alt_codon="";
  my $feature="";

# Calculate the sequence depth and mutation ratio for each variant by using the $info feature
  my @arr1=split /;/, $info;
#example of the $info obtained by using bcftools-v: DP=99;VDB=0.0308;AF1=0.5;AC1=1;DP4=43,43,2,11;MQ=51;FQ=107;PV4=0.033,0.0057,1,1;AF1=0.5;AC1=1;FQ=107
#print "$info\n\n@arr1\n\n";exit; 
 
# Check if the position is within an exon of any gene on this chromosome
  if (exists $cds_positions{$chromosome}) {
    foreach my $gene_id (keys %{$cds_positions{$chromosome}}) {
      foreach my $exon_num (keys %{$cds_positions{$chromosome}{$gene_id}}) {
        my $CDS_start_gene1 = $cds_positions{$chromosome}{$gene_id}{$exon_num}{CDS_start_gene};
        my $CDS_end_gene1 = $cds_positions{$chromosome}{$gene_id}{$exon_num}{CDS_end_gene};
        my $genome_start1 = $cds_positions{$chromosome}{$gene_id}{$exon_num}{genome_start};
        my $genome_end1 = $cds_positions{$chromosome}{$gene_id}{$exon_num}{genome_end};
        my $strand1 = $cds_positions{$chromosome}{$gene_id}{$exon_num}{Strand}; 
#        my $CDS_seq = $cds_seq{$gene_id};
        if ($position >= $genome_start1 && $position <= $genome_end1) {  
   
		  # Calculate the sequence depth and mutation ratio for each variant by using the $info feature
		  foreach my $element (@arr1){
  		       if($element =~ /DP4=(\d+,\d+,\d+,\d+)/){
                		my @DP4=split /,/,$1;
                		$depth = $DP4[0] + $DP4[1] + $DP4[2] + $DP4[3];
                		$MutRatio = (($DP4[2] + $DP4[3])/$depth)*100;
        		}
  		  }
		
		# Differentiate gene that locates on "+" or "-" strand
		if($strand1 eq "+"){
     		     #Define the gene and codon position of the variant
		     my $gene_position = $position - $genome_start1 + $CDS_start_gene1;
		     my $codon_position = int(($gene_position - 1) / 3) + 1;
                     my $CDS_seq = $cds_seq{$gene_id};
		     #Identify the codon and aa for point mutation, but not for INDELs
                     if($arr1[0] =~ /INDEL/){
                        $ref_aa="";$alt_aa="";$ref_codon="";$alt_codon="";$feature="INDEL"; # Do not show the codon and aa for the INDEL
                        print $output_fh "$chromosome\t$position\t$gene_id\t$strand1\t$exon_num\t$gene_position\t$codon_position\t$depth\t$MutRatio\t$feature\t$ref_nt\t$alt_nt\t$ref_codon\t$alt_codon\t$ref_aa\t$alt_aa\n";
                     }else{
                        $feature="Point_Mutation";
			my $CDS_seq = $cds_seq{$gene_id};
                        #Define the codon phase of the variant
                     	my $codon_phase = ($gene_position - 1) % 3;  # 0-based codon position
                     	my $codon_start = $gene_position - $codon_phase - 1;  # 0-based codon start position
                     	my $codon_end = $codon_start + 2;  # 0-based codon end position 
                     	my $ref_codon = substr($CDS_seq, $codon_start, 3); #obtain the reference codon
                     	my $print_ref_codon = $ref_codon;
                     	substr($ref_codon, $codon_phase, 1) = $alt_nt;
                     	#assign the altered codon to $alt_codon 
                     	my $alt_codon = $ref_codon;
                     	#chomp potential blanks; 
                     	chomp $alt_codon;
                     	chomp $print_ref_codon;
                     	#Translate codon to aa
                     	$ref_aa=translate_codon($print_ref_codon);
                     	$alt_aa=translate_codon($alt_codon);
			# Igore synonymous mutation
			if($ref_aa eq $alt_aa){next;
				}else{  
                     	print $output_fh "$chromosome\t$position\t$gene_id\t$strand1\t$exon_num\t$gene_position\t$codon_position\t$depth\t$MutRatio\t$feature\t$ref_nt\t$alt_nt\t$print_ref_codon\t$alt_codon\t$ref_aa\t$alt_aa\n";}   
			}
		}else{ 
		       my $CDS_seq = $cds_seq{$gene_id}; 
                       # Find the position of the nucleotide in the reversed CDS sequence
                       my $gene_position = $genome_end1 - $position + $CDS_start_gene1;
		       my $codon_position = int(($gene_position - 1) / 3) + 1;
		       my $alt_nt_comp = "";
#print "$cds_seq{$gene_id}\n\n";exit;
#print "$CDS_seq\n\n";exit;
		       if($arr1[0] =~ /INDEL/){
			  $ref_aa="";$alt_aa="";$ref_codon="";$alt_codon="";$feature="INDEL";
			 print $output_fh "$chromosome\t$position\t$gene_id\t$strand1\t$exon_num\t$gene_position\t$codon_position\t$depth\t$MutRatio\t$feature\t$ref_nt\t$alt_nt\t$ref_codon\t$alt_codon\t$ref_aa\t$alt_aa\n";
		       }else{
			  $feature="Point_Mutation";
 		          # Determine the codon phase
		          my $codon_phase = $gene_position % 3;
		       # calculate the position of the first nucleotide of the codon containing the reference nucleotide
		          my $codon_start = $gene_position - $codon_phase +1;
#print "Gene_pos: $gene_position\tCodon_phase\t$codon_phase\nCodon_start\t$codon_start\n\n";  exit; ##Check point

			# extract the codon from the CDS sequence
		          my $ref_codon = substr($CDS_seq, $codon_start-1, 3);
                          my $print_ref_codon = $ref_codon;
			  ##complement the altered nucleotide
			  if($alt_nt =~ /^[Aa]$/){$alt_nt_comp = "T";}
			  elsif($alt_nt =~ /^[Tt]$/){$alt_nt_comp = "A";}
                          elsif($alt_nt =~ /^[Cc]$/){$alt_nt_comp = "G";}
			  elsif($alt_nt =~ /^[Gg]$/){$alt_nt_comp = "C";}
                          substr($ref_codon, $codon_phase-1, 1) = $alt_nt_comp;
			  my $alt_codon = $ref_codon;
                          chomp $print_ref_codon;
		          chomp $alt_codon;                                                   
                          #Translate codon to aa
		          $ref_aa=translate_codon($print_ref_codon);
		          $alt_aa=translate_codon($alt_codon);
			  if($ref_aa eq $alt_aa){next;}else{
			          print $output_fh "$chromosome\t$position\t$gene_id\t$strand1\t$exon_num\t$gene_position\t$codon_position\t$depth\t$MutRatio\t$feature\t$ref_nt\t$alt_nt\t$print_ref_codon\t$alt_codon\t$ref_aa\t$alt_aa\n";}
			  }
                         }	
           }
      }
    }
  }
}close $vcf_fh;
close $output_fh;


# Function to translate a codon to an amino acid using a lookup table
sub translate_codon {
  my ($codon) = @_;
  my %codon_table = (
    "TTT" => "F", "TTC" => "F", "TTA" => "L", "TTG" => "L",
    "TCT" => "S", "TCC" => "S", "TCA" => "S", "TCG" => "S",
    "TAT" => "Y", "TAC" => "Y", "TAA" => "*", "TAG" => "*",
    "TGT" => "C", "TGC" => "C", "TGA" => "*", "TGG" => "W",
    "CTT" => "L", "CTC" => "L", "CTA" => "L", "CTG" => "L",
    "CCT" => "P", "CCC" => "P", "CCA" => "P", "CCG" => "P",
    "CAT" => "H", "CAC" => "H", "CAA" => "Q", "CAG" => "Q",
    "CGT" => "R", "CGC" => "R", "CGA" => "R", "CGG" => "R",
    "ATT" => "I", "ATC" => "I", "ATA" => "I", "ATG" => "M",
    "ACT" => "T", "ACC" => "T", "ACA" => "T", "ACG" => "T",
    "AAT" => "N", "AAC" => "N", "AAA" => "K", "AAG" => "K",
    "AGT" => "S", "AGC" => "S", "AGA" => "R", "AGG" => "R",
    "GTT" => "V", "GTC" => "V", "GTA" => "V", "GTG" => "V",
    "GCT" => "A", "GCC" => "A", "GCA" => "A", "GCG" => "A",
    "GAT" => "D", "GAC" => "D", "GAA" => "E", "GAG" => "E",
    "GGT" => "G", "GGC" => "G", "GGA" => "G", "GGG" => "G"
  );
  if (exists $codon_table{$codon}) {
    return $codon_table{$codon};
  } else {
    return "X";
  }
}

